cmake_minimum_required(VERSION 3.4)
project(franka_teleop_lmt)

set(CMAKE_BUILD_TYPE Release)
set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

find_package(catkin REQUIRED COMPONENTS
  roscpp
  rospy
  controller_interface
  dynamic_reconfigure
  eigen_conversions
  franka_hw
  geometry_msgs
  hardware_interface
  tf
  tf_conversions
  message_generation
  pluginlib
  realtime_tools
  std_msgs
)

find_package(Eigen3 REQUIRED)
find_package(Franka 0.7.0 REQUIRED)


find_path(DHD_INCLUDE_DIR NAMES "dhdc.h" PATHS "/home/rmil/sdk-3.14.0/include")
message("+++++++++++++++++++++${DHD_INCLUDE_DIR}+++++++++++++++++++++++++++++")
if(NOT DHD_INCLUDE_DIR)
  message("LIBRARY FOR DHD was not found. If you do not have it you will not be able to use the Omega Haptic device.") 
  return()
endif(NOT DHD_INCLUDE_DIR) 
include_directories(include ${catkin_INCLUDE_DIRS} ${DHD_INCLUDE_DIR}) 


find_library(DHDLIB NAMES "libdhd.a"  PATHS "/home/rmil/sdk-3.14.0/lib/release/lin-x86_64-gcc")
message("+++++++++++++++++++++++++++++++++++${DHDLIB}++++++++++++++++++++++++++++++++++++++++")
link_directories(${DHDLIB})


add_message_files(FILES
  JointTorqueComparison.msg
)

generate_messages()

catkin_package(
  INCLUDE_DIRS include
  LIBRARIES franka_teleop_lmt
  CATKIN_DEPENDS
    controller_interface
    dynamic_reconfigure
    eigen_conversions
    franka_hw
    franka_gripper
    geometry_msgs
    hardware_interface
    tf
    tf_conversions
    message_runtime
    pluginlib
    realtime_tools
    roscpp
  DEPENDS Franka
)

add_library(franka_teleop_lmt src/cartesian_impedance_example_controller.cpp)

add_dependencies(franka_teleop_lmt
  ${${PROJECT_NAME}_EXPORTED_TARGETS}
  ${catkin_EXPORTED_TARGETS}
  ${PROJECT_NAME}_generate_messages_cpp
  ${PROJECT_NAME}_gencpp
)

target_link_libraries(franka_teleop_lmt PUBLIC
  ${Franka_LIBRARIES}
  ${catkin_LIBRARIES}
  ${DHDLIB}
)

target_include_directories(franka_teleop_lmt SYSTEM PUBLIC
  ${Franka_INCLUDE_DIRS}
  ${EIGEN3_INCLUDE_DIRS}
  ${catkin_INCLUDE_DIRS}
)

include_directories(franka_teleop_lmt SYSTEM PUBLIC
  ${EIGEN3_INCLUDE_DIRS}
)

target_include_directories(franka_teleop_lmt PUBLIC
  include
  ${DHD_INCLUDE_DIR}
)

## Installation
install(TARGETS franka_teleop_lmt
  ARCHIVE DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
  LIBRARY DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
  RUNTIME DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
)
install(DIRECTORY launch
  DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION}
)
install(DIRECTORY config
  DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION}
)
install(FILES franka_teleop_lmt_plugin.xml
  DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION}
)

add_executable(simple_gripper_client src/moving_gripper.cpp)
target_include_directories(simple_gripper_client PUBLIC ${DHD_INCLUDE_DIR}) 
target_link_libraries(simple_gripper_client ${DHDLIB} usb-1.0 rt ncurses ${catkin_LIBRARIES}) #


add_executable(leader_node src/leader.cpp)
target_include_directories(leader_node PUBLIC ${DHD_INCLUDE_DIR}) 
target_link_libraries(leader_node ${DHDLIB} usb-1.0 rt ncurses ${catkin_LIBRARIES}) #


add_compile_options(-std=c++11)
add_executable(LfD_node src/LfD.cpp)
target_link_libraries(LfD_node ${catkin_LIBRARIES})

## Tools
include(${CMAKE_CURRENT_LIST_DIR}/../cmake/ClangTools.cmake OPTIONAL
  RESULT_VARIABLE CLANG_TOOLS
)
if(CLANG_TOOLS)
  file(GLOB_RECURSE SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/src/*.cpp)
  file(GLOB_RECURSE HEADERS
    ${CMAKE_CURRENT_SOURCE_DIR}/include/*.h
    ${CMAKE_CURRENT_SOURCE_DIR}/src/*.h
  )
  add_format_target(franka_teleop_lmt FILES ${SOURCES} ${HEADERS})
  add_tidy_target(franka_teleop_lmt
    FILES ${SOURCES}
    DEPENDS franka_teleop_lmt
  )
endif()


add_library(${PROJECT_NAME}_controllers_lib src/cartesian_impedance_example_controller.cpp)

# Specify libraries to link a library or executable target against
target_link_libraries(${PROJECT_NAME}_controllers_lib ${catkin_LIBRARIES})


